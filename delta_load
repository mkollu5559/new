import pytest
from pyspark.sql import SparkSession
from pyspark.sql.types import (
    StringType, IntegerType, StructType, StructField, LongType, DecimalType
)

from job import (
    get_data_type,
    get_spark_schema,
    ApplyMapping,
    parse_schema
)

# ---------- FIXTURES ----------

@pytest.fixture(scope="session")
def spark():
    return SparkSession.builder \
        .appName("unit-test") \
        .master("local[1]") \
        .getOrCreate()


# ---------- TESTS ----------

def test_get_data_type_string():
    result = get_data_type("STRING")
    assert isinstance(result, StringType)


def test_get_data_type_int():
    result = get_data_type("INT")
    assert isinstance(result, IntegerType)


def test_get_data_type_bigint():
    result = get_data_type("BIGINT")
    assert isinstance(result, LongType)


def test_get_data_type_decimal():
    result = get_data_type("decimal(10,2)")
    assert isinstance(result, DecimalType)
    assert result.precision == 10
    assert result.scale == 2


def test_get_spark_schema():
    schema_details = [
        {'col_name': 'id', 'src_type': 'int', 'tgt_type': 'bigint'},
        {'col_name': 'name', 'src_type': 'string', 'tgt_type': 'string'}
    ]

    src_schema, tgt_schema = get_spark_schema(schema_details)

    assert isinstance(src_schema, StructType)
    assert src_schema.fields[0].name == 'id'
    assert isinstance(tgt_schema['id'], LongType)
    assert isinstance(tgt_schema['name'], StringType)


def test_ApplyMapping_cast_column(spark):
    schema_details = [
        {'col_name': 'name', 'src_type': 'STRING', 'tgt_type': 'STRING'},
        {'col_name': 'age', 'src_type': 'STRING', 'tgt_type': 'INT'}
    ]
    input_data = [("Alice", "30"), ("Bob", "25")]
    df = spark.createDataFrame(input_data, ["name", "age"])

    result_df = ApplyMapping(df, schema_details)

    assert result_df.schema["age"].dataType == IntegerType()
    assert result_df.schema["name"].dataType == StringType()


def test_parse_schema_successful_match():
    source_schema = [
        {'col_name': 'id', 'data_type': 'int'},
        {'col_name': 'name', 'data_type': 'string'}
    ]
    target_schema = [
        {'col_name': 'id', 'data_type': 'bigint'},
        {'col_name': 'name', 'data_type': 'string'}
    ]

    result = parse_schema(source_schema, target_schema)

    assert len(result) == 2
    assert result[0]['col_name'] == 'id'
    assert result[0]['src_type'] == 'int'
    assert result[0]['tgt_type'] == 'bigint'
