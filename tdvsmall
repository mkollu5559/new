import pytest
from unittest.mock import patch, MagicMock
from db_config_create import Db_Config_Create  # Assuming your script is named `db_config_create.py`


@pytest.fixture
def mock_env_vars():
    with patch("db_config_create.getResolvedOptions") as mock_get_args:
        mock_get_args.return_value = {
            "OSS_ENV": "dev",
            "DATABASE_NAME": "test_db",
            "TABLE_NAME": "test_table",
            "SERVER": "td.test.com",
            "secret_name": "mysecret",
            "BUCKET_NAME": "my-bucket",
            "JOB_RUN_ID": "job-123"
        }
        yield


@pytest.fixture
def mock_boto3():
    with patch("db_config_create.boto3.resource") as mock_resource, \
         patch("db_config_create.boto3.session.Session") as mock_session:

        mock_ddb = MagicMock()
        mock_ddb.Table.return_value = MagicMock()
        mock_resource.return_value = mock_ddb

        mock_client = MagicMock()
        mock_client.get_secret_value.return_value = {
            "SecretString": '{"username": "admin", "password": "adminpass"}'
        }
        mock_session.return_value.client.return_value = mock_client

        yield mock_resource, mock_session


@pytest.fixture
def mock_spark():
    with patch("db_config_create.SparkSession.builder.getOrCreate") as mock_spark:
        mock_spark.return_value = MagicMock()
        yield mock_spark


def test_get_tdv_creds(mock_env_vars, mock_boto3, mock_spark):
    obj = Db_Config_Create()
    username, password = obj.get_tdv_creds()
    assert username == "admin"
    assert password == "adminpass"


def test_update_audit_table(mock_env_vars, mock_boto3, mock_spark):
    obj = Db_Config_Create()
    obj.update_audit_table("job-123", "test_db", "test_table", "Success", "")
    audit_call = obj.audit_table.update_item.call_args[1]
    assert audit_call["ExpressionAttributeValues"][":Run_Status"] == "Success"
