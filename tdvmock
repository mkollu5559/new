import sys
from unittest.mock import MagicMock, patch
import pytest

# Fix #1: Properly mock awsglue.getResolvedOptions BEFORE importing main code
fake_args = {
    "OSS_ENV": "dev",
    "DATABASE_NAME": "mydb_V",
    "TABLE_NAME": "mytable",
    "SERVER": "myserver",
    "secret_name": "my-secret",
    "BUCKET_NAME": "my-bucket",
    "JOB_RUN_ID": "run-12345"
}

mock_awsglue = MagicMock()
mock_awsglue.utils.getResolvedOptions.return_value = fake_args
sys.modules["awsglue"] = mock_awsglue
sys.modules["awsglue.utils"] = mock_awsglue.utils

# Now import the class after mocking
from your_module import Db_Config_Create  # Replace your_module with actual filename

@pytest.fixture(autouse=True)
def patch_dependencies():
    with patch("boto3.resource") as mock_boto3_resource, \
         patch("boto3.session.Session") as mock_boto3_session, \
         patch("teradatasql.connect") as mock_td_connect, \
         patch("pyspark.sql.SparkSession") as mock_spark_session:

        # Mock S3 and DynamoDB
        mock_s3 = MagicMock()
        mock_s3.Object.return_value.put.return_value = None
        mock_ddb_table = MagicMock()
        mock_boto3_resource.side_effect = lambda service: {
            "s3": mock_s3,
            "dynamodb": MagicMock(Table=MagicMock(return_value=mock_ddb_table))
        }[service]

        # Mock Secrets Manager
        mock_secrets_client = MagicMock()
        mock_secrets_client.get_secret_value.return_value = {
            "SecretString": '{"username": "tduser", "password": "tdpass"}'
        }
        mock_session = MagicMock()
        mock_session.client.return_value = mock_secrets_client
        mock_boto3_session.return_value = mock_session

        # Mock Spark
        mock_df = MagicMock()
        mock_df.count.return_value = 1
        mock_df.toPandas.return_value.sort_values.return_value = MagicMock(
            __getitem__=lambda self, key: ["col1 INT", "col2 STRING"],
            to_list=lambda: ["col1 INT", "col2 STRING"],
            index=[0, 1]
        )
        mock_reader = MagicMock()
        mock_reader.option.return_value = mock_reader
        mock_reader.load.return_value = mock_df
        mock_spark = MagicMock(read=MagicMock(format=MagicMock(return_value=mock_reader)))
        mock_spark_session.builder.appName.return_value.config.return_value.config.return_value.config.return_value.config.return_value.getOrCreate.return_value = mock_spark

        # Mock Teradata
        mock_cursor = MagicMock()
        mock_conn = MagicMock()
        mock_conn.cursor.return_value = mock_cursor
        mock_td_connect.return_value = mock_conn

        yield


@patch.object(Db_Config_Create, "get_tdv_creds", return_value=("tduser", "tdpass"))
@patch.object(Db_Config_Create, "func_tdconnect")
@patch.object(Db_Config_Create, "update_audit_table")
def test_write_to_s3(mock_update_audit, mock_tdconn, mock_get_creds):
    instance = Db_Config_Create()
    instance.write_to_s3()
    mock_update_audit.assert_called_with("run-12345", "mydb_V", "mytable", "Success", "")
