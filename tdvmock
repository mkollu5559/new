import sys
from unittest.mock import patch, MagicMock
import pytest

###############################################################################
# 1) Patch everything BOTO3, AWS Glue, Spark, Teradata BEFORE importing your code
###############################################################################

# a) Fake out awsglue.utils.getResolvedOptions
mock_awsglue_utils = MagicMock()
mock_awsglue_utils.getResolvedOptions.return_value = {
    "OSS_ENV": "dev",
    "DATABASE_NAME": "mydb_V",
    "TABLE_NAME": "mytable",
    "SERVER": "myserver",
    "secret_name": "my-secret",
    "BUCKET_NAME": "my-bucket",
    "JOB_RUN_ID": "run-12345"
}
# Insert into sys.modules so any "import awsglue..." sees these mocks
sys.modules["awsglue"] = MagicMock()
sys.modules["awsglue.utils"] = mock_awsglue_utils

# b) We'll create a global patch for boto3.resource so it won't need real creds
mock_boto3_resource = MagicMock()
fake_s3 = MagicMock()
fake_s3_obj = MagicMock()
fake_s3_obj.put.return_value = None
fake_s3.Object.return_value = fake_s3_obj
mock_boto3_resource.return_value = fake_s3

# c) Also patch session so Secrets Manager won't need real creds
mock_boto3_session = MagicMock()
fake_session = MagicMock()
fake_secrets_manager = MagicMock()
fake_secrets_manager.get_secret_value.return_value = {
    "SecretString": '{"username": "tduser", "password": "tdpass"}'
}
fake_session.client.return_value = fake_secrets_manager
mock_boto3_session.return_value = fake_session

# d) Patch teradatasql
mock_teradatasql = MagicMock()

# e) Patch pyspark
mock_spark_session = MagicMock()
fake_spark = MagicMock()
fake_reader = MagicMock()
fake_df = MagicMock()
fake_df.count.return_value = 1
fake_pandas = MagicMock()
fake_pandas.sort_values.return_value.__getitem__.return_value = ["col1 INT", "col2 STRING"]
fake_pandas.sort_values.return_value.to_list.return_value = ["col1 INT", "col2 STRING"]
fake_df.toPandas.return_value = fake_pandas
fake_reader.option.return_value = fake_reader
fake_reader.load.return_value = fake_df
fake_spark.read.format.return_value = fake_reader
mock_spark_session.builder.appName.return_value.config.return_value.config.return_value.config.return_value.config.return_value.getOrCreate.return_value = fake_spark

# Insert all these into sys.modules so that any direct import sees them.
sys.modules["boto3"] = MagicMock(resource=mock_boto3_resource, session=mock_boto3_session)
sys.modules["botocore"] = MagicMock()
sys.modules["teradatasql"] = mock_teradatasql
sys.modules["pyspark"] = MagicMock()
sys.modules["pyspark.sql"] = mock_spark_session
sys.modules["pyspark.sql.SparkSession"] = mock_spark_session

###############################################################################
# 2) NOW import your module (AFTER patches are in place)
###############################################################################
from db_config_create import Db_Config_Create  # replace with your module name!

###############################################################################
# 3) Pytest fixture (optional) if you want extra patching post-import
###############################################################################
@pytest.fixture
def more_patching():
    # Example if you want to patch internally used references in the class
    # (Already mostly patched by the lines above, but keep for completeness)
    with patch.object(Db_Config_Create, "get_tdv_creds", return_value=("tduser", "tdpass")) as mock_creds, \
         patch.object(Db_Config_Create, "func_tdconnect") as mock_conn, \
         patch.object(Db_Config_Create, "update_audit_table") as mock_audit:
        yield mock_creds, mock_conn, mock_audit

###############################################################################
# 4) Test
###############################################################################
def test_write_to_s3(more_patching):
    mock_creds, mock_conn, mock_audit = more_patching

    # Instantiate and run
    instance = Db_Config_Create()
    instance.write_to_s3()

    # Verify
    mock_audit.assert_called_with("run-12345", "mydb_V", "mytable", "Success", "")
